{"version":3,"sources":["logo.svg","pages/subject.js","App.js","utils/setting.js","serviceWorker.js","index.js"],"names":["module","exports","Subject","props","state","greeting","class","href","data-toggle","role","Component","console","log","App","Boolean","window","location","hostname","match","theme","createMuiTheme","ReactDOM","render","MuiThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,4JC+C5BC,G,8BA1Cb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXC,SAAU,IAHI,E,mHAWhB,OACI,yBAAKC,MAAM,WACP,4BAAQA,MAAM,eAEV,uBAAGC,KAAK,IAAID,MAAM,QAEd,0BAAMA,MAAM,aAAY,gCAAxB,KAEA,0BAAMA,MAAM,WAAU,qCAAtB,UAGJ,uBAAGC,KAAK,IAAID,MAAM,iBAAiBE,cAAY,YAAYC,KAAK,UAChE,0BAAMH,MAAM,WAAZ,sBAEA,yBAAKA,MAAM,sBACP,wBAAIA,MAAM,kBAEN,wBAAIA,MAAM,0BACV,uBAAGC,KAAK,IAAID,MAAM,kBAAkBE,cAAY,YAC5C,uBAAGF,MAAM,qBACT,0BAAMA,MAAM,uBAAZ,e,GAhCNI,cCItBC,QAAQC,ICPc,oC,IDmDPC,E,YAzCb,WAAYV,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXC,SAAU,IAHI,E,mHAkBhB,OACE,kBAAC,EAAD,U,GApBYK,aEEEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVN,IAAMC,EAAQC,YAAe,IAS7BC,IAASC,OACL,kBAACC,EAAA,EAAD,CAAkBJ,MAAOA,GACrB,kBAAC,EAAD,OAOLK,SAASC,eAAe,SDuGrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.13ce5d16.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { DOMAIN } from '../utils/setting'\r\n\r\nclass Subject extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      greeting: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n  }\r\n\r\n  render(){\r\n    return (\r\n        <div class=\"wrapper\">\r\n            <header class=\"main-header\">\r\n                {/* <!-- Logo --> */}\r\n                <a href=\"#\" class=\"logo\">\r\n                    {/* <!-- mini logo for sidebar mini 50x50 pixels --> */}\r\n                    <span class=\"logo-mini\"><b>S</b>C</span>\r\n                    {/* <!-- logo for regular state and mobile devices --> */}\r\n                    <span class=\"logo-lg\"><b>SEAASE</b> Club</span>\r\n                </a>\r\n                {/* <!-- Sidebar toggle button--> */}\r\n                <a href=\"#\" class=\"sidebar-toggle\" data-toggle=\"push-menu\" role=\"button\">\r\n                <span class=\"sr-only\">Toggle navigation</span>\r\n                </a>\r\n                <div class=\"navbar-custom-menu\">\r\n                    <ul class=\"nav navbar-nav\">\r\n                        {/* <!-- Messages: style can be found in dropdown.less--> */}\r\n                        <li class=\"dropdown messages-menu\">\r\n                        <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\r\n                            <i class=\"fa fa-envelope-o\"></i>\r\n                            <span class=\"label label-success\">4</span>\r\n                        </a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </header>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Subject;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { DOMAIN } from './utils/setting'\r\n//Components\r\nimport Subject from './pages/subject'\r\nconsole.log(DOMAIN);\r\n\r\nclass App extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      greeting: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount(){    \r\n    // axios.get(DOMAIN + '/api/helloworld')\r\n    // .then(result => {\r\n    //   console.log(result);\r\n      \r\n    //   this.setState({greeting: result.data.sayHi})\r\n    // })\r\n    // .catch(err => console.log(err))\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <Subject/>\r\n      // <div className=\"App\">\r\n      //   <header className=\"App-header\">\r\n      //     <h1>{this.state.greeting}</h1>\r\n      //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      //     <p>\r\n      //       Edit <code>src/App.js</code> and save to reload.\r\n      //     </p>\r\n      //     <a\r\n      //       className=\"App-link\"\r\n      //       href=\"https://reactjs.org\"\r\n      //       target=\"_blank\"\r\n      //       rel=\"noopener noreferrer\"\r\n      //     >\r\n      //       Learn React\r\n      //     </a>\r\n      //   </header>\r\n      // </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// export const DOMAIN = 'http://localhost:5000';\r\nexport const DOMAIN = 'https://seaaseclub.herokuapp.com'\r\nexport const colorPrimary = '#292f48'; \r\nexport const colorDisabled = 'rgba(0, 0, 0, 0.6)';  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst theme = createMuiTheme({\r\n    // props: {\r\n    //     MuiListItem: {\r\n    //         disabletouchripple: true\r\n    //     }\r\n    // }\r\n});\r\n\r\n\r\nReactDOM.render((  \r\n    <MuiThemeProvider theme={theme}>\r\n        <App/>\r\n    {/* <BrowserRouter>\r\n        <Switch>\r\n            <Route path='/' render={(props) => <App {...props} />} />\r\n        </Switch>\r\n    </BrowserRouter> */}\r\n    </MuiThemeProvider>   \r\n), document.getElementById('root'));\r\n// ReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}